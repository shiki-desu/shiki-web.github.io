{"version":3,"file":"js/3841.2e8c2f84.js","mappings":"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","sources":["webpack://shiki-web/../../../vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/components/DetailModal.vue","webpack://shiki-web/./src/components/DetailModal.vue","webpack://shiki-web/../../../../../../Mad%20Scientist/Desktop/Learn%20everthing/vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/components/MusicPlayer.vue?37e3","webpack://shiki-web/../../../../../../Mad%20Scientist/Desktop/Learn%20everthing/vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/components/MusicPlayer.vue","webpack://shiki-web/../../../vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/components/MusicPlayer.vue","webpack://shiki-web/./src/components/MusicPlayer.vue","webpack://shiki-web/./src/services/articleService.ts","webpack://shiki-web/./src/utils/scrollUtils.ts","webpack://shiki-web/../../../../../../Mad%20Scientist/Desktop/Learn%20everthing/vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/views/ShikiHome.vue?f5a3","webpack://shiki-web/../../../../../../Mad%20Scientist/Desktop/Learn%20everthing/vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/views/ShikiHome.vue","webpack://shiki-web/../../../vue%E8%87%AA%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99+%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/vue%E9%A1%B9%E7%9B%AE/shiki-web/src/views/ShikiHome.vue","webpack://shiki-web/./src/views/ShikiHome.vue","webpack://shiki-web/./src/components/ sync"],"sourcesContent":["<template>\n  <a-modal\n    :open=\"show\"\n    title=\"文章详情\"\n    @cancel=\"closeModal\"\n    @update:open=\"handleOpenChange\"\n    width=\"800px\"\n    :footer=\"null\"\n  >\n    <div v-if=\"detail\" class=\"modal-content\">\n      <h2 class=\"modal-title\">{{ detail.title }}</h2>\n      <p class=\"modal-date\">{{ detail.date }}</p>\n      <div class=\"content-wrapper\">\n        <div \n          v-for=\"(paragraph, index) in contentParagraphs\"\n          :key=\"index\"\n          class=\"content-paragraph\"\n        >\n          <img \n            v-if=\"paragraph.trim()\" \n            :src=\"getImageForParagraph(index)\"\n            :alt=\"`装饰图片 ${index+1}`\"\n            class=\"paragraph-image\"\n          />\n          <span>{{ paragraph }}</span>\n        </div>\n      </div>\n    </div>\n    <div v-else>\n      <p>暂无内容</p>\n    </div>\n  </a-modal>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue';\nimport { Modal } from 'ant-design-vue';\n\n// 定义详情数据类型\ninterface Detail {\n  id: number;\n  title: string;\n  date: string;\n  content: string;\n  coverImg: string;\n}\n\nexport default defineComponent({\n  name: 'DetailModal',\n  components: {\n    'a-modal': Modal\n  },\n  props: {\n    show: {\n      type: Boolean,\n      default: false\n    },\n    detail: {\n      type: Object as () => Detail | null,\n      default: null\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    // 将内容按换行符分割成段落\n    const contentParagraphs = computed(() => {\n      if (!props.detail?.content) return [];\n      return props.detail.content.split('\\n\\n');\n    });\n\n    // 可用的装饰图片列表\n    const decorativeImages = [\n      require('../assets/images/C.C.png'),\n      require('../assets/images/你别死啊.png'),\n      require('../assets/images/我要打十个.png'),\n      require('../assets/images/鬼雾.png'),\n      require('../assets/images/鲁鲁修.png'),\n      require('../assets/images/鲜血女王.png')\n    ];\n\n    // 根据段落索引获取图片\n    const getImageForParagraph = (index: number) => {\n      // 循环使用图片列表\n      return decorativeImages[index % decorativeImages.length];\n    };\n\n    return {\n      contentParagraphs,\n      getImageForParagraph\n    };\n  },\n  methods: {\n    closeModal() {\n      this.$emit('close');\n    },\n    handleOpenChange(newValue: boolean) {\n      if (!newValue) {\n        this.$emit('close');\n      }\n    }\n  }\n});\n</script>\n\n<style scoped>\n.modal-content {\n  padding: 16px 0;\n}\n\n.modal-title {\n  color: #333;\n  font-size: 24px;\n  margin-bottom: 12px;\n  font-weight: 600;\n}\n\n.modal-date {\n  color: #999;\n  font-size: 14px;\n  margin-bottom: 24px;\n}\n\n.content-wrapper {\n  font-size: 16px;\n  line-height: 1.8;\n}\n\n.content-paragraph {\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  padding: 12px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  transition: all 0.3s ease;\n}\n\n.content-paragraph:hover {\n  background-color: #e9ecef;\n  transform: translateX(5px);\n}\n\n.paragraph-image {\n  width: 40px;\n  height: 40px;\n  object-fit: cover;\n  margin-right: 12px;\n  border-radius: 50%;\n  flex-shrink: 0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>","import { render } from \"./DetailModal.vue?vue&type=template&id=f9ff0fac&scoped=true&ts=true\"\nimport script from \"./DetailModal.vue?vue&type=script&lang=ts\"\nexport * from \"./DetailModal.vue?vue&type=script&lang=ts\"\n\nimport \"./DetailModal.vue?vue&type=style&index=0&id=f9ff0fac&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f9ff0fac\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\"\nimport _imports_0 from '../assets/images/milet/milet底部.jpg'\n\n\nconst _hoisted_1 = [\"src\", \"alt\"]\nconst _hoisted_2 = { class: \"music-player-container\" }\nconst _hoisted_3 = { class: \"player-controls\" }\nconst _hoisted_4 = { class: \"song-info\" }\nconst _hoisted_5 = { class: \"song-title\" }\nconst _hoisted_6 = { class: \"song-artist\" }\nconst _hoisted_7 = { class: \"progress-container\" }\nconst _hoisted_8 = { class: \"progress-time\" }\nconst _hoisted_9 = { class: \"progress-bar\" }\nconst _hoisted_10 = { class: \"progress-time\" }\nconst _hoisted_11 = { class: \"control-buttons\" }\nconst _hoisted_12 = [\"title\"]\nconst _hoisted_13 = { class: \"icon\" }\nconst _hoisted_14 = { class: \"icon\" }\nconst _hoisted_15 = { class: \"playlist-container\" }\nconst _hoisted_16 = { class: \"playlist-content\" }\nconst _hoisted_17 = [\"onClick\"]\nconst _hoisted_18 = { class: \"playlist-item-info\" }\nconst _hoisted_19 = { class: \"playlist-item-title\" }\nconst _hoisted_20 = { class: \"playlist-item-artist\" }\nconst _hoisted_21 = { class: \"playlist-item-duration\" }\nconst _hoisted_22 = {\n  key: 1,\n  class: \"volume-control\"\n}\n\nimport { ref, onMounted, onUnmounted, computed, reactive } from 'vue';\n\n// 定义歌曲类型\ninterface Song {\n  id: number;\n  title: string;\n  artist: string;\n  src: string;\n  duration?: string;\n}\n\n// 创建音频上下文\ninterface FloatingImage {\n  id: number;\n  src: string;\n  style: { [key: string]: string };\n}\n\n// 悬浮图片数据 - 初始为空，后续延迟加载\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'MusicPlayer',\n  setup(__props) {\n\nconst audio = new Audio();\n\n// 播放列表\nconst playlist = ref<Song[]>([]);\n\n// 当前状态\nconst currentIndex = ref(0);\nconst isPlaying = ref(false);\nconst showPlaylist = ref(false);\nconst showVolume = ref(false);\nconst volume = ref(0.7);\nconst isMuted = ref(false);\nconst currentTime = ref(0);\nconst duration = ref(0);\nconst isDragging = ref(false);\n\n// 当前歌曲\nconst currentSong = computed(() => {\n  if (playlist.value.length === 0) {\n    return { title: '暂无歌曲', artist: '', src: '' };\n  }\n  return playlist.value[currentIndex.value];\n});\n\n// 定义悬浮图片的接口类型\nconst floatingImages = reactive<FloatingImage[]>([\n  { id: 1, src: '', style: {} },\n  { id: 2, src: '', style: {} },\n  { id: 3, src: '', style: {} },\n  { id: 4, src: '', style: {} }\n]);\n\n// 随机调整图片位置，避免重叠\nconst randomizeImagePositions = () => {\n  // 随机打乱图片数组\n  const shuffledImages = [...floatingImages].sort(() => Math.random() - 0.5);\n  \n  // 定义左右两侧的图片\n  const leftImages = shuffledImages.slice(0, 2);\n  const rightImages = shuffledImages.slice(2, 4);\n  \n  // 设置左侧图片位置 - 覆盖上下部分\n  leftImages.forEach((img, index) => {\n    img.style.left = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    img.style.right = 'auto';\n    // 一个在15%-35%（上部分），一个在55%-75%（下部分）\n    const topPosition = index === 0 ? \n      `${15 + Math.floor(Math.random() * 20)}%` : \n      `${55 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n  \n  // 设置右侧图片位置 - 覆盖上下部分\n  rightImages.forEach((img, index) => {\n    img.style.left = 'auto';\n    img.style.right = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    // 一个在25%-45%（上部分），一个在65%-85%（下部分）\n    const topPosition = index === 0 ? \n      `${25 + Math.floor(Math.random() * 20)}%` : \n      `${65 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n};\n\n// 定时随机变换图片位置\nlet positionInterval: number | null = null;\nconst startPositionAnimation = () => {\n  if (positionInterval) clearInterval(positionInterval);\n  positionInterval = window.setInterval(randomizeImagePositions, 8000);\n};\n\nconst stopPositionAnimation = () => {\n  if (positionInterval) {\n    clearInterval(positionInterval);\n    positionInterval = null;\n  }\n};\n\n// 进度百分比\nconst progressPercentage = computed(() => {\n  if (duration.value === 0) return 0;\n  return (currentTime.value / duration.value) * 100;\n});\n\n// 格式化时间\nconst formatTime = (seconds: number) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? '0' + secs : secs}`;\n};\n\n// 解析歌曲标题和艺术家\nconst parseSongInfo = (fileName: string): { title: string; artist: string } => {\n  // 处理不同格式的文件名\n  let artist = 'milet';\n  let title = fileName.replace('.mp3', '');\n  \n  // 处理特殊格式如 \"milet,Aimer,幾田りら - おもかげ\"\n  if (fileName.includes(' - ')) {\n    const parts = fileName.split(' - ');\n    artist = parts[0];\n    title = parts[1].replace('.mp3', '');\n  } \n  // 处理 \"MAN WITH A MISSION,milet - 絆ノ奇跡\"\n  else if (fileName.includes(',')) {\n    const parts = fileName.split('.mp3');\n    title = parts[0];\n  }\n  \n  return { title, artist };\n};\n\n// 加载音乐文件\nconst loadMusicFiles = async () => {\n  // 获取音乐文件夹中的所有mp3文件\n  const musicFiles = [\n    'MAN WITH A MISSION,milet - 絆ノ奇跡.mp3',\n    'milet & Aimer & 幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet - Again and Again.mp3',\n    'milet - Anytime Anywhere.mp3',\n    'milet - Bluer.mp3',\n    'milet - Come Here (Session1).mp3',\n    'milet - December.mp3',\n    'milet - Final Call.mp3',\n    'milet - Fine Line.mp3',\n    'milet - Flare.mp3',\n    'milet - Fly High.mp3',\n    'milet - Grab the air.mp3',\n    'milet - HALFWAY.mp3',\n    'milet - Hey Song.mp3',\n    'milet - Higher.mp3',\n    'milet - Hit the Lights.mp3',\n    'milet - I still.mp3',\n    'milet - Nobody Knows.mp3',\n    'milet - Noёl In July.mp3',\n    'milet - On the Edge.mp3',\n    'milet - One Reason.mp3',\n    'milet - One Touch.mp3',\n    'milet - Ordinary days.mp3',\n    'milet - Outsider.mp3',\n    'milet - Parachute.mp3',\n    'milet - Prover.mp3',\n    'milet - Rewrite.mp3',\n    'milet - SEVENTH HEAVEN.mp3',\n    'milet - Tell me.mp3',\n    'milet - The Love We\\'ve Made.mp3',\n    'milet - Time Is On Our Side.mp3',\n    'milet - Walkin\\' In My Lane.mp3',\n    'milet - Waterfall.mp3',\n    'milet - Who I Am.mp3',\n    'milet - You & I.mp3',\n    'milet - Your Light.mp3',\n    'milet - b r o k e n.mp3',\n    'milet - checkmate.mp3',\n    'milet - hanataba.mp3',\n    'milet - inside you - From THE FIRST TAKE.mp3',\n    'milet - inside you.mp3',\n    'milet - jam.mp3',\n    'milet - us - From THE FIRST TAKE.mp3',\n    'milet - us.mp3',\n    'milet,Aimer,幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet,MAN WITH A MISSION - コイコガレ.mp3'\n  ];\n\n  // 创建播放列表\n  playlist.value = musicFiles.map((file, index) => {\n    const { title, artist } = parseSongInfo(file);\n    return {\n      id: index + 1,\n      title,\n      artist,\n      src: require(`../assets/music/${file}`)\n    };\n  });\n\n  // 如果有歌曲，初始化第一首\n  if (playlist.value.length > 0) {\n    await loadSong(currentIndex.value);\n  }\n};\n\n// 加载指定歌曲\nconst loadSong = async (index: number) => {\n  if (index < 0 || index >= playlist.value.length) return;\n  \n  currentIndex.value = index;\n  const song = playlist.value[index];\n  \n  audio.src = song.src;\n  audio.volume = volume.value;\n  \n  // 尝试获取歌曲时长\n  try {\n    await audio.load();\n    if (audio.duration) {\n      duration.value = audio.duration;\n      song.duration = formatTime(audio.duration);\n    }\n  } catch (error) {\n    console.error('加载歌曲失败:', error);\n  }\n};\n\n// 播放/暂停切换\nconst togglePlay = async () => {\n  if (playlist.value.length === 0) return;\n  \n  if (isPlaying.value) {\n    audio.pause();\n  } else {\n    try {\n      await audio.play();\n    } catch (error) {\n      console.error('播放失败:', error);\n      // 处理浏览器的自动播放限制\n      alert('请点击播放器以开始播放音乐');\n    }\n  }\n  isPlaying.value = !isPlaying.value;\n};\n\n// 播放指定歌曲\nconst playSong = async (index: number) => {\n  const wasPlaying = isPlaying.value;\n  await loadSong(index);\n  if (wasPlaying) {\n    await togglePlay();\n  }\n  showPlaylist.value = false;\n};\n\n// 下一首\nconst nextSong = () => {\n  const nextIndex = (currentIndex.value + 1) % playlist.value.length;\n  playSong(nextIndex);\n};\n\n// 上一首\nconst prevSong = () => {\n  const prevIndex = (currentIndex.value - 1 + playlist.value.length) % playlist.value.length;\n  playSong(prevIndex);\n};\n\n// 切换播放列表显示\nconst togglePlaylist = () => {\n  showPlaylist.value = !showPlaylist.value;\n};\n\n// 切换音量控制显示\nconst toggleVolume = () => {\n  showVolume.value = !showVolume.value;\n};\n\n// 更新音量\nconst updateVolume = () => {\n  audio.volume = volume.value;\n  isMuted.value = volume.value === 0;\n};\n\n// 开始拖动进度条\nconst startDragging = () => {\n  isDragging.value = true;\n};\n\n// 设置进度\nconst setProgress = (percentage: number) => {\n  if (duration.value === 0) return;\n  \n  const newTime = (percentage / 100) * duration.value;\n  currentTime.value = newTime;\n  audio.currentTime = newTime;\n};\n\n// 监听鼠标移动（拖动进度条时）\nconst handleMouseMove = (e: MouseEvent) => {\n  if (!isDragging.value) return;\n  \n  const progressBar = document.querySelector('.progress-bar') as HTMLElement;\n  if (!progressBar) return;\n  \n  const rect = progressBar.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));\n  \n  // 只更新UI，不更新音频.currentTime\n  currentTime.value = (percentage / 100) * duration.value;\n};\n\n// 监听鼠标释放（结束拖动进度条时）\nconst handleMouseUp = () => {\n  if (!isDragging.value) return;\n  \n  setProgress(progressPercentage.value);\n  isDragging.value = false;\n};\n\n// 音频事件监听\nconst setupAudioEvents = () => {\n  // 更新当前播放时间\n  audio.ontimeupdate = () => {\n    if (!isDragging.value) {\n      currentTime.value = audio.currentTime;\n    }\n  };\n\n  // 歌曲结束时自动播放下一首\n  audio.onended = () => {\n    nextSong();\n  };\n\n  // 加载完成时获取时长\n  audio.onloadedmetadata = () => {\n    duration.value = audio.duration;\n    if (currentSong.value && 'duration' in currentSong.value) {\n      (currentSong.value as Song).duration = formatTime(audio.duration);\n    }\n  };\n};\n\n// 生命周期钩子\nonMounted(() => {\n  loadMusicFiles();\n  setupAudioEvents();\n  \n  // 添加全局鼠标事件监听\n  document.addEventListener('mousemove', handleMouseMove);\n  document.addEventListener('mouseup', handleMouseUp);\n  \n  // 初始化悬浮图片动画\n  randomizeImagePositions();\n  startPositionAnimation();\n  \n  // 延迟加载悬浮图片，避免初始加载时性能压力过大\n  setTimeout(() => {\n    floatingImages[0].src = require('../assets/images/milet/milet_01.jpg');\n    floatingImages[1].src = require('../assets/images/milet/milet_02.jpg');\n    \n    // 再次延迟加载剩余的图片\n    setTimeout(() => {\n      floatingImages[2].src = require('../assets/images/milet/milet_03.jpg');\n      floatingImages[3].src = require('../assets/images/milet/milet_04.jpg');\n    }, 500);\n  }, 1000);\n});\n\nonUnmounted(() => {\n  // 清理资源\n  audio.pause();\n  document.removeEventListener('mousemove', handleMouseMove);\n  document.removeEventListener('mouseup', handleMouseUp);\n  \n  // 清理定时器\n  stopPositionAnimation();\n});\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(floatingImages, (img) => {\n      return (_openBlock(), _createElementBlock(\"div\", {\n        key: img.id,\n        class: \"floating-image\",\n        style: _normalizeStyle(img.style)\n      }, [\n        _createElementVNode(\"img\", {\n          src: img.src,\n          alt: 'milet ' + img.id,\n          class: \"floating-img\"\n        }, null, 8, _hoisted_1)\n      ], 4))\n    }), 128)),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _cache[6] || (_cache[6] = _createElementVNode(\"div\", { class: \"player-top-image\" }, [\n        _createElementVNode(\"img\", {\n          src: _imports_0,\n          alt: \"milet\",\n          class: \"top-image\"\n        })\n      ], -1)),\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createElementVNode(\"h3\", _hoisted_5, _toDisplayString(currentSong.value.title), 1),\n          _createElementVNode(\"p\", _hoisted_6, _toDisplayString(currentSong.value.artist), 1)\n        ]),\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createElementVNode(\"span\", _hoisted_8, _toDisplayString(formatTime(currentTime.value)), 1),\n          _createElementVNode(\"div\", _hoisted_9, [\n            _createElementVNode(\"div\", {\n              class: \"progress-fill\",\n              style: _normalizeStyle({ width: progressPercentage.value + '%' })\n            }, null, 4),\n            _createElementVNode(\"div\", {\n              class: \"progress-handle\",\n              style: _normalizeStyle({ left: progressPercentage.value + '%' }),\n              onMousedown: startDragging\n            }, null, 36)\n          ]),\n          _createElementVNode(\"span\", _hoisted_10, _toDisplayString(formatTime(duration.value)), 1)\n        ]),\n        _createElementVNode(\"div\", _hoisted_11, [\n          _createElementVNode(\"button\", {\n            class: \"control-btn list-btn\",\n            onClick: togglePlaylist,\n            title: \"查看播放列表\"\n          }, [...(_cache[2] || (_cache[2] = [\n            _createElementVNode(\"span\", { class: \"icon\" }, \"📋\", -1)\n          ]))]),\n          _createElementVNode(\"button\", {\n            class: \"control-btn prev-btn\",\n            onClick: prevSong,\n            title: \"上一首\"\n          }, [...(_cache[3] || (_cache[3] = [\n            _createElementVNode(\"span\", { class: \"icon\" }, \"⏮️\", -1)\n          ]))]),\n          _createElementVNode(\"button\", {\n            class: \"control-btn play-btn\",\n            onClick: togglePlay,\n            title: isPlaying.value ? '暂停' : '播放'\n          }, [\n            _createElementVNode(\"span\", _hoisted_13, _toDisplayString(isPlaying.value ? '⏸️' : '▶️'), 1)\n          ], 8, _hoisted_12),\n          _createElementVNode(\"button\", {\n            class: \"control-btn next-btn\",\n            onClick: nextSong,\n            title: \"下一首\"\n          }, [...(_cache[4] || (_cache[4] = [\n            _createElementVNode(\"span\", { class: \"icon\" }, \"⏭️\", -1)\n          ]))]),\n          _createElementVNode(\"button\", {\n            class: \"control-btn volume-btn\",\n            onClick: toggleVolume,\n            onDblclick: _cache[0] || (_cache[0] = () => { volume.value = volume.value > 0 ? 0 : 0.7; updateVolume(); }),\n            title: \"音量 (双击静音)\"\n          }, [\n            _createElementVNode(\"span\", _hoisted_14, _toDisplayString(isMuted.value ? '🔇' : '🔊'), 1)\n          ], 32)\n        ])\n      ]),\n      (showPlaylist.value)\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 0,\n            class: \"playlist-overlay\",\n            onClick: _withModifiers(togglePlaylist, [\"self\"])\n          }, [\n            _createElementVNode(\"div\", _hoisted_15, [\n              _createElementVNode(\"div\", { class: \"playlist-header\" }, [\n                _cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"播放列表\", -1)),\n                _createElementVNode(\"button\", {\n                  class: \"close-btn\",\n                  onClick: togglePlaylist\n                }, \"×\")\n              ]),\n              _createElementVNode(\"div\", _hoisted_16, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(playlist.value, (song, index) => {\n                  return (_openBlock(), _createElementBlock(\"div\", {\n                    key: index,\n                    class: _normalizeClass([\"playlist-item\", { 'active': index === currentIndex.value }]),\n                    onClick: ($event: any) => (playSong(index))\n                  }, [\n                    _createElementVNode(\"div\", _hoisted_18, [\n                      _createElementVNode(\"div\", _hoisted_19, _toDisplayString(song.title), 1),\n                      _createElementVNode(\"div\", _hoisted_20, _toDisplayString(song.artist), 1)\n                    ]),\n                    _createElementVNode(\"div\", _hoisted_21, _toDisplayString(song.duration), 1)\n                  ], 10, _hoisted_17))\n                }), 128))\n              ])\n            ])\n          ]))\n        : _createCommentVNode(\"\", true),\n      (showVolume.value)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.01\",\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((volume).value = $event)),\n              onInput: updateVolume,\n              class: \"volume-slider\"\n            }, null, 544), [\n              [_vModelText, volume.value]\n            ])\n          ]))\n        : _createCommentVNode(\"\", true)\n    ])\n  ], 64))\n}\n}\n\n})","<template>\n  <!-- 悬浮图片（放在播放器外部） -->\n  <div \n    v-for=\"img in floatingImages\" \n    :key=\"img.id\" \n    class=\"floating-image\"\n    :style=\"img.style\"\n  >\n    <img :src=\"img.src\" :alt=\"'milet ' + img.id\" class=\"floating-img\">\n  </div>\n  \n  <div class=\"music-player-container\">\n    <!-- 播放器上半部分图片 -->\n    <div class=\"player-top-image\">\n      <img src=\"../assets/images/milet/milet底部.jpg\" alt=\"milet\" class=\"top-image\">\n    </div>\n\n    <!-- 播放器控制 -->\n    <div class=\"player-controls\">\n      <!-- 歌曲信息 -->\n      <div class=\"song-info\">\n        <h3 class=\"song-title\">{{ currentSong.title }}</h3>\n        <p class=\"song-artist\">{{ currentSong.artist }}</p>\n      </div>\n\n      <!-- 进度条 -->\n      <div class=\"progress-container\">\n        <span class=\"progress-time\">{{ formatTime(currentTime) }}</span>\n        <div class=\"progress-bar\">\n          <div \n            class=\"progress-fill\"\n            :style=\"{ width: progressPercentage + '%' }\"\n          ></div>\n          <div \n            class=\"progress-handle\"\n            :style=\"{ left: progressPercentage + '%' }\"\n            @mousedown=\"startDragging\"\n          ></div>\n        </div>\n        <span class=\"progress-time\">{{ formatTime(duration) }}</span>\n      </div>\n\n      <!-- 控制按钮 -->\n      <div class=\"control-buttons\">\n        <button \n          class=\"control-btn list-btn\"\n          @click=\"togglePlaylist\"\n          title=\"查看播放列表\"\n        >\n          <span class=\"icon\">📋</span>\n        </button>\n        <button \n          class=\"control-btn prev-btn\"\n          @click=\"prevSong\"\n          title=\"上一首\"\n        >\n          <span class=\"icon\">⏮️</span>\n        </button>\n        <button \n          class=\"control-btn play-btn\"\n          @click=\"togglePlay\"\n          :title=\"isPlaying ? '暂停' : '播放'\"\n        >\n          <span class=\"icon\">{{ isPlaying ? '⏸️' : '▶️' }}</span>\n        </button>\n        <button \n          class=\"control-btn next-btn\"\n          @click=\"nextSong\"\n          title=\"下一首\"\n        >\n          <span class=\"icon\">⏭️</span>\n        </button>\n        <button \n          class=\"control-btn volume-btn\"\n          @click=\"toggleVolume\"\n          @dblclick=\"() => { volume = volume > 0 ? 0 : 0.7; updateVolume(); }\"\n          title=\"音量 (双击静音)\"\n        >\n          <span class=\"icon\">{{ isMuted ? '🔇' : '🔊' }}</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- 播放列表 -->\n    <div class=\"playlist-overlay\" v-if=\"showPlaylist\" @click.self=\"togglePlaylist\">\n      <div class=\"playlist-container\">\n        <div class=\"playlist-header\">\n          <h3>播放列表</h3>\n          <button class=\"close-btn\" @click=\"togglePlaylist\">×</button>\n        </div>\n        <div class=\"playlist-content\">\n          <div \n            v-for=\"(song, index) in playlist\"\n            :key=\"index\"\n            class=\"playlist-item\"\n            :class=\"{ 'active': index === currentIndex }\"\n            @click=\"playSong(index)\"\n          >\n            <div class=\"playlist-item-info\">\n              <div class=\"playlist-item-title\">{{ song.title }}</div>\n              <div class=\"playlist-item-artist\">{{ song.artist }}</div>\n            </div>\n            <div class=\"playlist-item-duration\">{{ song.duration }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 音量控制条 -->\n    <div class=\"volume-control\" v-if=\"showVolume\">\n      <input \n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.01\"\n        v-model=\"volume\"\n        @input=\"updateVolume\"\n        class=\"volume-slider\"\n      >\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed, reactive } from 'vue';\n\n// 定义歌曲类型\ninterface Song {\n  id: number;\n  title: string;\n  artist: string;\n  src: string;\n  duration?: string;\n}\n\n// 创建音频上下文\nconst audio = new Audio();\n\n// 播放列表\nconst playlist = ref<Song[]>([]);\n\n// 当前状态\nconst currentIndex = ref(0);\nconst isPlaying = ref(false);\nconst showPlaylist = ref(false);\nconst showVolume = ref(false);\nconst volume = ref(0.7);\nconst isMuted = ref(false);\nconst currentTime = ref(0);\nconst duration = ref(0);\nconst isDragging = ref(false);\n\n// 当前歌曲\nconst currentSong = computed(() => {\n  if (playlist.value.length === 0) {\n    return { title: '暂无歌曲', artist: '', src: '' };\n  }\n  return playlist.value[currentIndex.value];\n});\n\n// 定义悬浮图片的接口类型\ninterface FloatingImage {\n  id: number;\n  src: string;\n  style: { [key: string]: string };\n}\n\n// 悬浮图片数据 - 初始为空，后续延迟加载\nconst floatingImages = reactive<FloatingImage[]>([\n  { id: 1, src: '', style: {} },\n  { id: 2, src: '', style: {} },\n  { id: 3, src: '', style: {} },\n  { id: 4, src: '', style: {} }\n]);\n\n// 随机调整图片位置，避免重叠\nconst randomizeImagePositions = () => {\n  // 随机打乱图片数组\n  const shuffledImages = [...floatingImages].sort(() => Math.random() - 0.5);\n  \n  // 定义左右两侧的图片\n  const leftImages = shuffledImages.slice(0, 2);\n  const rightImages = shuffledImages.slice(2, 4);\n  \n  // 设置左侧图片位置 - 覆盖上下部分\n  leftImages.forEach((img, index) => {\n    img.style.left = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    img.style.right = 'auto';\n    // 一个在15%-35%（上部分），一个在55%-75%（下部分）\n    const topPosition = index === 0 ? \n      `${15 + Math.floor(Math.random() * 20)}%` : \n      `${55 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n  \n  // 设置右侧图片位置 - 覆盖上下部分\n  rightImages.forEach((img, index) => {\n    img.style.left = 'auto';\n    img.style.right = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    // 一个在25%-45%（上部分），一个在65%-85%（下部分）\n    const topPosition = index === 0 ? \n      `${25 + Math.floor(Math.random() * 20)}%` : \n      `${65 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n};\n\n// 定时随机变换图片位置\nlet positionInterval: number | null = null;\nconst startPositionAnimation = () => {\n  if (positionInterval) clearInterval(positionInterval);\n  positionInterval = window.setInterval(randomizeImagePositions, 8000);\n};\n\nconst stopPositionAnimation = () => {\n  if (positionInterval) {\n    clearInterval(positionInterval);\n    positionInterval = null;\n  }\n};\n\n// 进度百分比\nconst progressPercentage = computed(() => {\n  if (duration.value === 0) return 0;\n  return (currentTime.value / duration.value) * 100;\n});\n\n// 格式化时间\nconst formatTime = (seconds: number) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? '0' + secs : secs}`;\n};\n\n// 解析歌曲标题和艺术家\nconst parseSongInfo = (fileName: string): { title: string; artist: string } => {\n  // 处理不同格式的文件名\n  let artist = 'milet';\n  let title = fileName.replace('.mp3', '');\n  \n  // 处理特殊格式如 \"milet,Aimer,幾田りら - おもかげ\"\n  if (fileName.includes(' - ')) {\n    const parts = fileName.split(' - ');\n    artist = parts[0];\n    title = parts[1].replace('.mp3', '');\n  } \n  // 处理 \"MAN WITH A MISSION,milet - 絆ノ奇跡\"\n  else if (fileName.includes(',')) {\n    const parts = fileName.split('.mp3');\n    title = parts[0];\n  }\n  \n  return { title, artist };\n};\n\n// 加载音乐文件\nconst loadMusicFiles = async () => {\n  // 获取音乐文件夹中的所有mp3文件\n  const musicFiles = [\n    'MAN WITH A MISSION,milet - 絆ノ奇跡.mp3',\n    'milet & Aimer & 幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet - Again and Again.mp3',\n    'milet - Anytime Anywhere.mp3',\n    'milet - Bluer.mp3',\n    'milet - Come Here (Session1).mp3',\n    'milet - December.mp3',\n    'milet - Final Call.mp3',\n    'milet - Fine Line.mp3',\n    'milet - Flare.mp3',\n    'milet - Fly High.mp3',\n    'milet - Grab the air.mp3',\n    'milet - HALFWAY.mp3',\n    'milet - Hey Song.mp3',\n    'milet - Higher.mp3',\n    'milet - Hit the Lights.mp3',\n    'milet - I still.mp3',\n    'milet - Nobody Knows.mp3',\n    'milet - Noёl In July.mp3',\n    'milet - On the Edge.mp3',\n    'milet - One Reason.mp3',\n    'milet - One Touch.mp3',\n    'milet - Ordinary days.mp3',\n    'milet - Outsider.mp3',\n    'milet - Parachute.mp3',\n    'milet - Prover.mp3',\n    'milet - Rewrite.mp3',\n    'milet - SEVENTH HEAVEN.mp3',\n    'milet - Tell me.mp3',\n    'milet - The Love We\\'ve Made.mp3',\n    'milet - Time Is On Our Side.mp3',\n    'milet - Walkin\\' In My Lane.mp3',\n    'milet - Waterfall.mp3',\n    'milet - Who I Am.mp3',\n    'milet - You & I.mp3',\n    'milet - Your Light.mp3',\n    'milet - b r o k e n.mp3',\n    'milet - checkmate.mp3',\n    'milet - hanataba.mp3',\n    'milet - inside you - From THE FIRST TAKE.mp3',\n    'milet - inside you.mp3',\n    'milet - jam.mp3',\n    'milet - us - From THE FIRST TAKE.mp3',\n    'milet - us.mp3',\n    'milet,Aimer,幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet,MAN WITH A MISSION - コイコガレ.mp3'\n  ];\n\n  // 创建播放列表\n  playlist.value = musicFiles.map((file, index) => {\n    const { title, artist } = parseSongInfo(file);\n    return {\n      id: index + 1,\n      title,\n      artist,\n      src: require(`../assets/music/${file}`)\n    };\n  });\n\n  // 如果有歌曲，初始化第一首\n  if (playlist.value.length > 0) {\n    await loadSong(currentIndex.value);\n  }\n};\n\n// 加载指定歌曲\nconst loadSong = async (index: number) => {\n  if (index < 0 || index >= playlist.value.length) return;\n  \n  currentIndex.value = index;\n  const song = playlist.value[index];\n  \n  audio.src = song.src;\n  audio.volume = volume.value;\n  \n  // 尝试获取歌曲时长\n  try {\n    await audio.load();\n    if (audio.duration) {\n      duration.value = audio.duration;\n      song.duration = formatTime(audio.duration);\n    }\n  } catch (error) {\n    console.error('加载歌曲失败:', error);\n  }\n};\n\n// 播放/暂停切换\nconst togglePlay = async () => {\n  if (playlist.value.length === 0) return;\n  \n  if (isPlaying.value) {\n    audio.pause();\n  } else {\n    try {\n      await audio.play();\n    } catch (error) {\n      console.error('播放失败:', error);\n      // 处理浏览器的自动播放限制\n      alert('请点击播放器以开始播放音乐');\n    }\n  }\n  isPlaying.value = !isPlaying.value;\n};\n\n// 播放指定歌曲\nconst playSong = async (index: number) => {\n  const wasPlaying = isPlaying.value;\n  await loadSong(index);\n  if (wasPlaying) {\n    await togglePlay();\n  }\n  showPlaylist.value = false;\n};\n\n// 下一首\nconst nextSong = () => {\n  const nextIndex = (currentIndex.value + 1) % playlist.value.length;\n  playSong(nextIndex);\n};\n\n// 上一首\nconst prevSong = () => {\n  const prevIndex = (currentIndex.value - 1 + playlist.value.length) % playlist.value.length;\n  playSong(prevIndex);\n};\n\n// 切换播放列表显示\nconst togglePlaylist = () => {\n  showPlaylist.value = !showPlaylist.value;\n};\n\n// 切换音量控制显示\nconst toggleVolume = () => {\n  showVolume.value = !showVolume.value;\n};\n\n// 更新音量\nconst updateVolume = () => {\n  audio.volume = volume.value;\n  isMuted.value = volume.value === 0;\n};\n\n// 开始拖动进度条\nconst startDragging = () => {\n  isDragging.value = true;\n};\n\n// 设置进度\nconst setProgress = (percentage: number) => {\n  if (duration.value === 0) return;\n  \n  const newTime = (percentage / 100) * duration.value;\n  currentTime.value = newTime;\n  audio.currentTime = newTime;\n};\n\n// 监听鼠标移动（拖动进度条时）\nconst handleMouseMove = (e: MouseEvent) => {\n  if (!isDragging.value) return;\n  \n  const progressBar = document.querySelector('.progress-bar') as HTMLElement;\n  if (!progressBar) return;\n  \n  const rect = progressBar.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));\n  \n  // 只更新UI，不更新音频.currentTime\n  currentTime.value = (percentage / 100) * duration.value;\n};\n\n// 监听鼠标释放（结束拖动进度条时）\nconst handleMouseUp = () => {\n  if (!isDragging.value) return;\n  \n  setProgress(progressPercentage.value);\n  isDragging.value = false;\n};\n\n// 音频事件监听\nconst setupAudioEvents = () => {\n  // 更新当前播放时间\n  audio.ontimeupdate = () => {\n    if (!isDragging.value) {\n      currentTime.value = audio.currentTime;\n    }\n  };\n\n  // 歌曲结束时自动播放下一首\n  audio.onended = () => {\n    nextSong();\n  };\n\n  // 加载完成时获取时长\n  audio.onloadedmetadata = () => {\n    duration.value = audio.duration;\n    if (currentSong.value && 'duration' in currentSong.value) {\n      (currentSong.value as Song).duration = formatTime(audio.duration);\n    }\n  };\n};\n\n// 生命周期钩子\nonMounted(() => {\n  loadMusicFiles();\n  setupAudioEvents();\n  \n  // 添加全局鼠标事件监听\n  document.addEventListener('mousemove', handleMouseMove);\n  document.addEventListener('mouseup', handleMouseUp);\n  \n  // 初始化悬浮图片动画\n  randomizeImagePositions();\n  startPositionAnimation();\n  \n  // 延迟加载悬浮图片，避免初始加载时性能压力过大\n  setTimeout(() => {\n    floatingImages[0].src = require('../assets/images/milet/milet_01.jpg');\n    floatingImages[1].src = require('../assets/images/milet/milet_02.jpg');\n    \n    // 再次延迟加载剩余的图片\n    setTimeout(() => {\n      floatingImages[2].src = require('../assets/images/milet/milet_03.jpg');\n      floatingImages[3].src = require('../assets/images/milet/milet_04.jpg');\n    }, 500);\n  }, 1000);\n});\n\nonUnmounted(() => {\n  // 清理资源\n  audio.pause();\n  document.removeEventListener('mousemove', handleMouseMove);\n  document.removeEventListener('mouseup', handleMouseUp);\n  \n  // 清理定时器\n  stopPositionAnimation();\n});\n</script>\n\n<style scoped>\n.music-player-container {\n  width: 400px;\n  background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\n  border-radius: 20px;\n  padding: 30px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  color: #ffffff;\n  position: relative;\n  border: 2px solid #333;\n}\n\n/* 乐盘动画 */\n.vinyl-container {\n  width: 200px;\n  height: 200px;\n  margin: 0 auto 30px;\n  perspective: 1000px;\n}\n\n.vinyl-record {\n  width: 100%;\n  height: 100%;\n  background: radial-gradient(circle, #000000 0%, #333333 70%, #000000 71%, #000000 100%);\n  border-radius: 50%;\n  position: relative;\n  transform-style: preserve-3d;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);\n}\n\n.vinyl-center {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, #ffffff 0%, #cccccc 100%);\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n}\n\n.vinyl-grooves {\n  position: absolute;\n  top: 15%;\n  left: 15%;\n  right: 15%;\n  bottom: 15%;\n  border-radius: 50%;\n  background: repeating-radial-gradient(\n    circle at center,\n    #333 0%,\n    #000 2%,\n    #333 4%,\n    #000 6%,\n    #333 8%\n  );\n  opacity: 0.6;\n}\n\n/* 乐盘旋转动画 */\n@keyframes vinylSpin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* 悬浮图片样式 */\n.floating-image {\n  position: fixed;\n  z-index: 10;\n  opacity: 0.7;\n  transform: scale(0.9);\n  transition: all 0.5s ease;\n  animation: floatAnimation 8s ease-in-out infinite;\n  pointer-events: none;\n  width: 220px;\n  height: 280px;\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n}\n\n/* 播放器上半部分图片样式 */\n.player-top-image {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n  border-radius: 10px 10px 0 0;\n  position: relative;\n  margin-bottom: 20px;\n}\n\n.top-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 0.3s ease;\n}\n\n.music-player-container:hover .top-image {\n  transform: scale(1.05);\n}\n\n/* 浮动动画 - 使用transform-origin确保旋转围绕中心 */\n@keyframes floatAnimation {\n  0% {\n    transform: scale(0.9) translateY(0) rotate(0deg);\n    transform-origin: center center;\n  }\n  25% {\n    transform: scale(0.92) translateY(-10px) rotate(1deg);\n    transform-origin: center center;\n  }\n  50% {\n    transform: scale(0.95) translateY(-15px) rotate(2deg);\n    transform-origin: center center;\n  }\n  75% {\n    transform: scale(0.92) translateY(-10px) rotate(1deg);\n    transform-origin: center center;\n  }\n  100% {\n    transform: scale(0.9) translateY(0) rotate(0deg);\n    transform-origin: center center;\n  }\n}\n\n.floating-image:hover {\n  opacity: 0.9;\n  transform: scale(1.05) !important;\n  z-index: 20;\n  pointer-events: auto;\n}\n\n.floating-img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: filter 0.3s ease;\n}\n\n.floating-image:hover .floating-img {\n  filter: brightness(1.1) saturate(1.2);\n}\n\n.floating-img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: filter 0.3s ease;\n}\n\n/* 悬浮动画 */\n@keyframes floatAnimation {\n  0%, 100% {\n    transform: translateY(0) scale(0.9) rotate(0deg);\n    opacity: 0.7;\n  }\n  50% {\n    transform: translateY(-15px) scale(1) rotate(2deg);\n    opacity: 0.9;\n  }\n}\n\n/* 音乐播放时图片效果增强 */\n.music-player-container:hover .floating-image {\n  transform: scale(1);\n  opacity: 0.8;\n}\n\n.music-player-container:hover .floating-img {\n  filter: brightness(1.1) saturate(1.2);\n}\n\n/* 响应式调整悬浮图片 */\n@media (max-width: 768px) {\n  .floating-image {\n    max-width: 100px;\n    max-height: 100px;\n  }\n}\n\n@media (max-width: 450px) {\n  .floating-image {\n    max-width: 70px;\n    max-height: 70px;\n  }\n}\n\n.vinyl-spin .vinyl-record {\n  animation: vinylSpin 20s linear infinite;\n}\n\n/* 播放器控制 */\n.player-controls {\n  text-align: center;\n}\n\n/* 歌曲信息 */\n.song-info {\n  margin-bottom: 20px;\n}\n\n.song-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin: 0 0 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.song-artist {\n  font-size: 14px;\n  color: #cccccc;\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* 进度条 */\n.progress-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  gap: 10px;\n}\n\n.progress-time {\n  font-size: 12px;\n  color: #cccccc;\n  min-width: 40px;\n}\n\n.progress-bar {\n  flex: 1;\n  height: 8px;\n  background: #444;\n  border-radius: 4px;\n  position: relative;\n  cursor: pointer;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #6366f1, #8b5cf6);\n  border-radius: 4px;\n  transition: width 0.1s ease;\n}\n\n.progress-handle {\n  width: 16px;\n  height: 16px;\n  background: #ffffff;\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(99, 102, 241, 0.5);\n  transition: all 0.2s ease;\n}\n\n.progress-handle:hover {\n  transform: translate(-50%, -50%) scale(1.2);\n  box-shadow: 0 0 15px rgba(99, 102, 241, 0.8);\n}\n\n/* 控制按钮 */\n.control-buttons {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n}\n\n.control-btn {\n  background: none;\n  border: none;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.control-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: scale(1.1);\n}\n\n.play-btn {\n  background: linear-gradient(135deg, #6366f1, #8b5cf6);\n  width: 50px;\n  height: 50px;\n  box-shadow: 0 5px 15px rgba(99, 102, 241, 0.5);\n}\n\n.play-btn:hover {\n  background: linear-gradient(135deg, #4f46e5, #7c3aed);\n  box-shadow: 0 5px 20px rgba(99, 102, 241, 0.7);\n}\n\n.icon {\n  font-size: 18px;\n}\n\n.play-btn .icon {\n  font-size: 20px;\n}\n\n/* 播放列表 */\n.playlist-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.playlist-container {\n  width: 400px;\n  max-height: 600px;\n  background: #1a1a1a;\n  border-radius: 10px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n}\n\n.playlist-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  background: #2d2d2d;\n  border-bottom: 1px solid #333;\n}\n\n.playlist-header h3 {\n  margin: 0;\n  color: #ffffff;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #ffffff;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background 0.3s ease;\n}\n\n.close-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.playlist-content {\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.playlist-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  border-bottom: 1px solid #333;\n  cursor: pointer;\n  transition: background 0.3s ease;\n}\n\n.playlist-item:hover {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.playlist-item.active {\n  background: rgba(99, 102, 241, 0.2);\n}\n\n.playlist-item-info {\n  flex: 1;\n  text-align: left;\n}\n\n.playlist-item-title {\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.playlist-item-artist {\n  font-size: 12px;\n  color: #cccccc;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.playlist-item-duration {\n  font-size: 12px;\n  color: #cccccc;\n  margin-left: 15px;\n}\n\n/* 音量控制 */\n.volume-control {\n  position: absolute;\n  bottom: 100px;\n  right: 30px;\n  transform: rotate(-90deg) translateX(50%);\n  transform-origin: right center;\n  z-index: 10;\n  background: #2d2d2d;\n  padding: 10px;\n  border-radius: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n}\n\n.volume-slider {\n  width: 100px;\n  height: 5px;\n  -webkit-appearance: none;\n  appearance: none;\n  background: #444;\n  outline: none;\n  border-radius: 5px;\n}\n\n.volume-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 15px;\n  height: 15px;\n  background: #6366f1;\n  cursor: pointer;\n  border-radius: 50%;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n}\n\n.volume-slider::-moz-range-thumb {\n  width: 15px;\n  height: 15px;\n  background: #6366f1;\n  cursor: pointer;\n  border-radius: 50%;\n  border: none;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n}\n\n/* 响应式调整 */\n@media (max-width: 450px) {\n  .music-player-container {\n    width: 90%;\n    padding: 20px;\n  }\n  \n  .vinyl-container {\n    width: 150px;\n    height: 150px;\n  }\n  \n  .control-buttons {\n    gap: 10px;\n  }\n  \n  .playlist-container {\n    width: 90%;\n  }\n}\n</style>","<template>\n  <!-- 悬浮图片（放在播放器外部） -->\n  <div \n    v-for=\"img in floatingImages\" \n    :key=\"img.id\" \n    class=\"floating-image\"\n    :style=\"img.style\"\n  >\n    <img :src=\"img.src\" :alt=\"'milet ' + img.id\" class=\"floating-img\">\n  </div>\n  \n  <div class=\"music-player-container\">\n    <!-- 播放器上半部分图片 -->\n    <div class=\"player-top-image\">\n      <img src=\"../assets/images/milet/milet底部.jpg\" alt=\"milet\" class=\"top-image\">\n    </div>\n\n    <!-- 播放器控制 -->\n    <div class=\"player-controls\">\n      <!-- 歌曲信息 -->\n      <div class=\"song-info\">\n        <h3 class=\"song-title\">{{ currentSong.title }}</h3>\n        <p class=\"song-artist\">{{ currentSong.artist }}</p>\n      </div>\n\n      <!-- 进度条 -->\n      <div class=\"progress-container\">\n        <span class=\"progress-time\">{{ formatTime(currentTime) }}</span>\n        <div class=\"progress-bar\">\n          <div \n            class=\"progress-fill\"\n            :style=\"{ width: progressPercentage + '%' }\"\n          ></div>\n          <div \n            class=\"progress-handle\"\n            :style=\"{ left: progressPercentage + '%' }\"\n            @mousedown=\"startDragging\"\n          ></div>\n        </div>\n        <span class=\"progress-time\">{{ formatTime(duration) }}</span>\n      </div>\n\n      <!-- 控制按钮 -->\n      <div class=\"control-buttons\">\n        <button \n          class=\"control-btn list-btn\"\n          @click=\"togglePlaylist\"\n          title=\"查看播放列表\"\n        >\n          <span class=\"icon\">📋</span>\n        </button>\n        <button \n          class=\"control-btn prev-btn\"\n          @click=\"prevSong\"\n          title=\"上一首\"\n        >\n          <span class=\"icon\">⏮️</span>\n        </button>\n        <button \n          class=\"control-btn play-btn\"\n          @click=\"togglePlay\"\n          :title=\"isPlaying ? '暂停' : '播放'\"\n        >\n          <span class=\"icon\">{{ isPlaying ? '⏸️' : '▶️' }}</span>\n        </button>\n        <button \n          class=\"control-btn next-btn\"\n          @click=\"nextSong\"\n          title=\"下一首\"\n        >\n          <span class=\"icon\">⏭️</span>\n        </button>\n        <button \n          class=\"control-btn volume-btn\"\n          @click=\"toggleVolume\"\n          @dblclick=\"() => { volume = volume > 0 ? 0 : 0.7; updateVolume(); }\"\n          title=\"音量 (双击静音)\"\n        >\n          <span class=\"icon\">{{ isMuted ? '🔇' : '🔊' }}</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- 播放列表 -->\n    <div class=\"playlist-overlay\" v-if=\"showPlaylist\" @click.self=\"togglePlaylist\">\n      <div class=\"playlist-container\">\n        <div class=\"playlist-header\">\n          <h3>播放列表</h3>\n          <button class=\"close-btn\" @click=\"togglePlaylist\">×</button>\n        </div>\n        <div class=\"playlist-content\">\n          <div \n            v-for=\"(song, index) in playlist\"\n            :key=\"index\"\n            class=\"playlist-item\"\n            :class=\"{ 'active': index === currentIndex }\"\n            @click=\"playSong(index)\"\n          >\n            <div class=\"playlist-item-info\">\n              <div class=\"playlist-item-title\">{{ song.title }}</div>\n              <div class=\"playlist-item-artist\">{{ song.artist }}</div>\n            </div>\n            <div class=\"playlist-item-duration\">{{ song.duration }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 音量控制条 -->\n    <div class=\"volume-control\" v-if=\"showVolume\">\n      <input \n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.01\"\n        v-model=\"volume\"\n        @input=\"updateVolume\"\n        class=\"volume-slider\"\n      >\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed, reactive } from 'vue';\n\n// 定义歌曲类型\ninterface Song {\n  id: number;\n  title: string;\n  artist: string;\n  src: string;\n  duration?: string;\n}\n\n// 创建音频上下文\nconst audio = new Audio();\n\n// 播放列表\nconst playlist = ref<Song[]>([]);\n\n// 当前状态\nconst currentIndex = ref(0);\nconst isPlaying = ref(false);\nconst showPlaylist = ref(false);\nconst showVolume = ref(false);\nconst volume = ref(0.7);\nconst isMuted = ref(false);\nconst currentTime = ref(0);\nconst duration = ref(0);\nconst isDragging = ref(false);\n\n// 当前歌曲\nconst currentSong = computed(() => {\n  if (playlist.value.length === 0) {\n    return { title: '暂无歌曲', artist: '', src: '' };\n  }\n  return playlist.value[currentIndex.value];\n});\n\n// 定义悬浮图片的接口类型\ninterface FloatingImage {\n  id: number;\n  src: string;\n  style: { [key: string]: string };\n}\n\n// 悬浮图片数据 - 初始为空，后续延迟加载\nconst floatingImages = reactive<FloatingImage[]>([\n  { id: 1, src: '', style: {} },\n  { id: 2, src: '', style: {} },\n  { id: 3, src: '', style: {} },\n  { id: 4, src: '', style: {} }\n]);\n\n// 随机调整图片位置，避免重叠\nconst randomizeImagePositions = () => {\n  // 随机打乱图片数组\n  const shuffledImages = [...floatingImages].sort(() => Math.random() - 0.5);\n  \n  // 定义左右两侧的图片\n  const leftImages = shuffledImages.slice(0, 2);\n  const rightImages = shuffledImages.slice(2, 4);\n  \n  // 设置左侧图片位置 - 覆盖上下部分\n  leftImages.forEach((img, index) => {\n    img.style.left = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    img.style.right = 'auto';\n    // 一个在15%-35%（上部分），一个在55%-75%（下部分）\n    const topPosition = index === 0 ? \n      `${15 + Math.floor(Math.random() * 20)}%` : \n      `${55 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n  \n  // 设置右侧图片位置 - 覆盖上下部分\n  rightImages.forEach((img, index) => {\n    img.style.left = 'auto';\n    img.style.right = `${3 + Math.random() * 2}%`; // 3%-5% 随机位置\n    // 一个在25%-45%（上部分），一个在65%-85%（下部分）\n    const topPosition = index === 0 ? \n      `${25 + Math.floor(Math.random() * 20)}%` : \n      `${65 + Math.floor(Math.random() * 20)}%`;\n    img.style.top = topPosition;\n    img.style.animationDelay = `${Math.random() * 2}s`;\n    img.style.zIndex = `${10 + index}`; // 确保层级不同\n  });\n};\n\n// 定时随机变换图片位置\nlet positionInterval: number | null = null;\nconst startPositionAnimation = () => {\n  if (positionInterval) clearInterval(positionInterval);\n  positionInterval = window.setInterval(randomizeImagePositions, 8000);\n};\n\nconst stopPositionAnimation = () => {\n  if (positionInterval) {\n    clearInterval(positionInterval);\n    positionInterval = null;\n  }\n};\n\n// 进度百分比\nconst progressPercentage = computed(() => {\n  if (duration.value === 0) return 0;\n  return (currentTime.value / duration.value) * 100;\n});\n\n// 格式化时间\nconst formatTime = (seconds: number) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? '0' + secs : secs}`;\n};\n\n// 解析歌曲标题和艺术家\nconst parseSongInfo = (fileName: string): { title: string; artist: string } => {\n  // 处理不同格式的文件名\n  let artist = 'milet';\n  let title = fileName.replace('.mp3', '');\n  \n  // 处理特殊格式如 \"milet,Aimer,幾田りら - おもかげ\"\n  if (fileName.includes(' - ')) {\n    const parts = fileName.split(' - ');\n    artist = parts[0];\n    title = parts[1].replace('.mp3', '');\n  } \n  // 处理 \"MAN WITH A MISSION,milet - 絆ノ奇跡\"\n  else if (fileName.includes(',')) {\n    const parts = fileName.split('.mp3');\n    title = parts[0];\n  }\n  \n  return { title, artist };\n};\n\n// 加载音乐文件\nconst loadMusicFiles = async () => {\n  // 获取音乐文件夹中的所有mp3文件\n  const musicFiles = [\n    'MAN WITH A MISSION,milet - 絆ノ奇跡.mp3',\n    'milet & Aimer & 幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet - Again and Again.mp3',\n    'milet - Anytime Anywhere.mp3',\n    'milet - Bluer.mp3',\n    'milet - Come Here (Session1).mp3',\n    'milet - December.mp3',\n    'milet - Final Call.mp3',\n    'milet - Fine Line.mp3',\n    'milet - Flare.mp3',\n    'milet - Fly High.mp3',\n    'milet - Grab the air.mp3',\n    'milet - HALFWAY.mp3',\n    'milet - Hey Song.mp3',\n    'milet - Higher.mp3',\n    'milet - Hit the Lights.mp3',\n    'milet - I still.mp3',\n    'milet - Nobody Knows.mp3',\n    'milet - Noёl In July.mp3',\n    'milet - On the Edge.mp3',\n    'milet - One Reason.mp3',\n    'milet - One Touch.mp3',\n    'milet - Ordinary days.mp3',\n    'milet - Outsider.mp3',\n    'milet - Parachute.mp3',\n    'milet - Prover.mp3',\n    'milet - Rewrite.mp3',\n    'milet - SEVENTH HEAVEN.mp3',\n    'milet - Tell me.mp3',\n    'milet - The Love We\\'ve Made.mp3',\n    'milet - Time Is On Our Side.mp3',\n    'milet - Walkin\\' In My Lane.mp3',\n    'milet - Waterfall.mp3',\n    'milet - Who I Am.mp3',\n    'milet - You & I.mp3',\n    'milet - Your Light.mp3',\n    'milet - b r o k e n.mp3',\n    'milet - checkmate.mp3',\n    'milet - hanataba.mp3',\n    'milet - inside you - From THE FIRST TAKE.mp3',\n    'milet - inside you.mp3',\n    'milet - jam.mp3',\n    'milet - us - From THE FIRST TAKE.mp3',\n    'milet - us.mp3',\n    'milet,Aimer,幾田りら - おもかげ (produced by Vaundy).mp3',\n    'milet,MAN WITH A MISSION - コイコガレ.mp3'\n  ];\n\n  // 创建播放列表\n  playlist.value = musicFiles.map((file, index) => {\n    const { title, artist } = parseSongInfo(file);\n    return {\n      id: index + 1,\n      title,\n      artist,\n      src: require(`../assets/music/${file}`)\n    };\n  });\n\n  // 如果有歌曲，初始化第一首\n  if (playlist.value.length > 0) {\n    await loadSong(currentIndex.value);\n  }\n};\n\n// 加载指定歌曲\nconst loadSong = async (index: number) => {\n  if (index < 0 || index >= playlist.value.length) return;\n  \n  currentIndex.value = index;\n  const song = playlist.value[index];\n  \n  audio.src = song.src;\n  audio.volume = volume.value;\n  \n  // 尝试获取歌曲时长\n  try {\n    await audio.load();\n    if (audio.duration) {\n      duration.value = audio.duration;\n      song.duration = formatTime(audio.duration);\n    }\n  } catch (error) {\n    console.error('加载歌曲失败:', error);\n  }\n};\n\n// 播放/暂停切换\nconst togglePlay = async () => {\n  if (playlist.value.length === 0) return;\n  \n  if (isPlaying.value) {\n    audio.pause();\n  } else {\n    try {\n      await audio.play();\n    } catch (error) {\n      console.error('播放失败:', error);\n      // 处理浏览器的自动播放限制\n      alert('请点击播放器以开始播放音乐');\n    }\n  }\n  isPlaying.value = !isPlaying.value;\n};\n\n// 播放指定歌曲\nconst playSong = async (index: number) => {\n  const wasPlaying = isPlaying.value;\n  await loadSong(index);\n  if (wasPlaying) {\n    await togglePlay();\n  }\n  showPlaylist.value = false;\n};\n\n// 下一首\nconst nextSong = () => {\n  const nextIndex = (currentIndex.value + 1) % playlist.value.length;\n  playSong(nextIndex);\n};\n\n// 上一首\nconst prevSong = () => {\n  const prevIndex = (currentIndex.value - 1 + playlist.value.length) % playlist.value.length;\n  playSong(prevIndex);\n};\n\n// 切换播放列表显示\nconst togglePlaylist = () => {\n  showPlaylist.value = !showPlaylist.value;\n};\n\n// 切换音量控制显示\nconst toggleVolume = () => {\n  showVolume.value = !showVolume.value;\n};\n\n// 更新音量\nconst updateVolume = () => {\n  audio.volume = volume.value;\n  isMuted.value = volume.value === 0;\n};\n\n// 开始拖动进度条\nconst startDragging = () => {\n  isDragging.value = true;\n};\n\n// 设置进度\nconst setProgress = (percentage: number) => {\n  if (duration.value === 0) return;\n  \n  const newTime = (percentage / 100) * duration.value;\n  currentTime.value = newTime;\n  audio.currentTime = newTime;\n};\n\n// 监听鼠标移动（拖动进度条时）\nconst handleMouseMove = (e: MouseEvent) => {\n  if (!isDragging.value) return;\n  \n  const progressBar = document.querySelector('.progress-bar') as HTMLElement;\n  if (!progressBar) return;\n  \n  const rect = progressBar.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));\n  \n  // 只更新UI，不更新音频.currentTime\n  currentTime.value = (percentage / 100) * duration.value;\n};\n\n// 监听鼠标释放（结束拖动进度条时）\nconst handleMouseUp = () => {\n  if (!isDragging.value) return;\n  \n  setProgress(progressPercentage.value);\n  isDragging.value = false;\n};\n\n// 音频事件监听\nconst setupAudioEvents = () => {\n  // 更新当前播放时间\n  audio.ontimeupdate = () => {\n    if (!isDragging.value) {\n      currentTime.value = audio.currentTime;\n    }\n  };\n\n  // 歌曲结束时自动播放下一首\n  audio.onended = () => {\n    nextSong();\n  };\n\n  // 加载完成时获取时长\n  audio.onloadedmetadata = () => {\n    duration.value = audio.duration;\n    if (currentSong.value && 'duration' in currentSong.value) {\n      (currentSong.value as Song).duration = formatTime(audio.duration);\n    }\n  };\n};\n\n// 生命周期钩子\nonMounted(() => {\n  loadMusicFiles();\n  setupAudioEvents();\n  \n  // 添加全局鼠标事件监听\n  document.addEventListener('mousemove', handleMouseMove);\n  document.addEventListener('mouseup', handleMouseUp);\n  \n  // 初始化悬浮图片动画\n  randomizeImagePositions();\n  startPositionAnimation();\n  \n  // 延迟加载悬浮图片，避免初始加载时性能压力过大\n  setTimeout(() => {\n    floatingImages[0].src = require('../assets/images/milet/milet_01.jpg');\n    floatingImages[1].src = require('../assets/images/milet/milet_02.jpg');\n    \n    // 再次延迟加载剩余的图片\n    setTimeout(() => {\n      floatingImages[2].src = require('../assets/images/milet/milet_03.jpg');\n      floatingImages[3].src = require('../assets/images/milet/milet_04.jpg');\n    }, 500);\n  }, 1000);\n});\n\nonUnmounted(() => {\n  // 清理资源\n  audio.pause();\n  document.removeEventListener('mousemove', handleMouseMove);\n  document.removeEventListener('mouseup', handleMouseUp);\n  \n  // 清理定时器\n  stopPositionAnimation();\n});\n</script>\n\n<style scoped>\n.music-player-container {\n  width: 400px;\n  background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\n  border-radius: 20px;\n  padding: 30px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  color: #ffffff;\n  position: relative;\n  border: 2px solid #333;\n}\n\n/* 乐盘动画 */\n.vinyl-container {\n  width: 200px;\n  height: 200px;\n  margin: 0 auto 30px;\n  perspective: 1000px;\n}\n\n.vinyl-record {\n  width: 100%;\n  height: 100%;\n  background: radial-gradient(circle, #000000 0%, #333333 70%, #000000 71%, #000000 100%);\n  border-radius: 50%;\n  position: relative;\n  transform-style: preserve-3d;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);\n}\n\n.vinyl-center {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, #ffffff 0%, #cccccc 100%);\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n}\n\n.vinyl-grooves {\n  position: absolute;\n  top: 15%;\n  left: 15%;\n  right: 15%;\n  bottom: 15%;\n  border-radius: 50%;\n  background: repeating-radial-gradient(\n    circle at center,\n    #333 0%,\n    #000 2%,\n    #333 4%,\n    #000 6%,\n    #333 8%\n  );\n  opacity: 0.6;\n}\n\n/* 乐盘旋转动画 */\n@keyframes vinylSpin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* 悬浮图片样式 */\n.floating-image {\n  position: fixed;\n  z-index: 10;\n  opacity: 0.7;\n  transform: scale(0.9);\n  transition: all 0.5s ease;\n  animation: floatAnimation 8s ease-in-out infinite;\n  pointer-events: none;\n  width: 220px;\n  height: 280px;\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n}\n\n/* 播放器上半部分图片样式 */\n.player-top-image {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n  border-radius: 10px 10px 0 0;\n  position: relative;\n  margin-bottom: 20px;\n}\n\n.top-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 0.3s ease;\n}\n\n.music-player-container:hover .top-image {\n  transform: scale(1.05);\n}\n\n/* 浮动动画 - 使用transform-origin确保旋转围绕中心 */\n@keyframes floatAnimation {\n  0% {\n    transform: scale(0.9) translateY(0) rotate(0deg);\n    transform-origin: center center;\n  }\n  25% {\n    transform: scale(0.92) translateY(-10px) rotate(1deg);\n    transform-origin: center center;\n  }\n  50% {\n    transform: scale(0.95) translateY(-15px) rotate(2deg);\n    transform-origin: center center;\n  }\n  75% {\n    transform: scale(0.92) translateY(-10px) rotate(1deg);\n    transform-origin: center center;\n  }\n  100% {\n    transform: scale(0.9) translateY(0) rotate(0deg);\n    transform-origin: center center;\n  }\n}\n\n.floating-image:hover {\n  opacity: 0.9;\n  transform: scale(1.05) !important;\n  z-index: 20;\n  pointer-events: auto;\n}\n\n.floating-img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: filter 0.3s ease;\n}\n\n.floating-image:hover .floating-img {\n  filter: brightness(1.1) saturate(1.2);\n}\n\n.floating-img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: filter 0.3s ease;\n}\n\n/* 悬浮动画 */\n@keyframes floatAnimation {\n  0%, 100% {\n    transform: translateY(0) scale(0.9) rotate(0deg);\n    opacity: 0.7;\n  }\n  50% {\n    transform: translateY(-15px) scale(1) rotate(2deg);\n    opacity: 0.9;\n  }\n}\n\n/* 音乐播放时图片效果增强 */\n.music-player-container:hover .floating-image {\n  transform: scale(1);\n  opacity: 0.8;\n}\n\n.music-player-container:hover .floating-img {\n  filter: brightness(1.1) saturate(1.2);\n}\n\n/* 响应式调整悬浮图片 */\n@media (max-width: 768px) {\n  .floating-image {\n    max-width: 100px;\n    max-height: 100px;\n  }\n}\n\n@media (max-width: 450px) {\n  .floating-image {\n    max-width: 70px;\n    max-height: 70px;\n  }\n}\n\n.vinyl-spin .vinyl-record {\n  animation: vinylSpin 20s linear infinite;\n}\n\n/* 播放器控制 */\n.player-controls {\n  text-align: center;\n}\n\n/* 歌曲信息 */\n.song-info {\n  margin-bottom: 20px;\n}\n\n.song-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin: 0 0 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.song-artist {\n  font-size: 14px;\n  color: #cccccc;\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* 进度条 */\n.progress-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  gap: 10px;\n}\n\n.progress-time {\n  font-size: 12px;\n  color: #cccccc;\n  min-width: 40px;\n}\n\n.progress-bar {\n  flex: 1;\n  height: 8px;\n  background: #444;\n  border-radius: 4px;\n  position: relative;\n  cursor: pointer;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #6366f1, #8b5cf6);\n  border-radius: 4px;\n  transition: width 0.1s ease;\n}\n\n.progress-handle {\n  width: 16px;\n  height: 16px;\n  background: #ffffff;\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(99, 102, 241, 0.5);\n  transition: all 0.2s ease;\n}\n\n.progress-handle:hover {\n  transform: translate(-50%, -50%) scale(1.2);\n  box-shadow: 0 0 15px rgba(99, 102, 241, 0.8);\n}\n\n/* 控制按钮 */\n.control-buttons {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n}\n\n.control-btn {\n  background: none;\n  border: none;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 10px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.control-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: scale(1.1);\n}\n\n.play-btn {\n  background: linear-gradient(135deg, #6366f1, #8b5cf6);\n  width: 50px;\n  height: 50px;\n  box-shadow: 0 5px 15px rgba(99, 102, 241, 0.5);\n}\n\n.play-btn:hover {\n  background: linear-gradient(135deg, #4f46e5, #7c3aed);\n  box-shadow: 0 5px 20px rgba(99, 102, 241, 0.7);\n}\n\n.icon {\n  font-size: 18px;\n}\n\n.play-btn .icon {\n  font-size: 20px;\n}\n\n/* 播放列表 */\n.playlist-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.playlist-container {\n  width: 400px;\n  max-height: 600px;\n  background: #1a1a1a;\n  border-radius: 10px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n}\n\n.playlist-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  background: #2d2d2d;\n  border-bottom: 1px solid #333;\n}\n\n.playlist-header h3 {\n  margin: 0;\n  color: #ffffff;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #ffffff;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background 0.3s ease;\n}\n\n.close-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.playlist-content {\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.playlist-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  border-bottom: 1px solid #333;\n  cursor: pointer;\n  transition: background 0.3s ease;\n}\n\n.playlist-item:hover {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.playlist-item.active {\n  background: rgba(99, 102, 241, 0.2);\n}\n\n.playlist-item-info {\n  flex: 1;\n  text-align: left;\n}\n\n.playlist-item-title {\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.playlist-item-artist {\n  font-size: 12px;\n  color: #cccccc;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.playlist-item-duration {\n  font-size: 12px;\n  color: #cccccc;\n  margin-left: 15px;\n}\n\n/* 音量控制 */\n.volume-control {\n  position: absolute;\n  bottom: 100px;\n  right: 30px;\n  transform: rotate(-90deg) translateX(50%);\n  transform-origin: right center;\n  z-index: 10;\n  background: #2d2d2d;\n  padding: 10px;\n  border-radius: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n}\n\n.volume-slider {\n  width: 100px;\n  height: 5px;\n  -webkit-appearance: none;\n  appearance: none;\n  background: #444;\n  outline: none;\n  border-radius: 5px;\n}\n\n.volume-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 15px;\n  height: 15px;\n  background: #6366f1;\n  cursor: pointer;\n  border-radius: 50%;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n}\n\n.volume-slider::-moz-range-thumb {\n  width: 15px;\n  height: 15px;\n  background: #6366f1;\n  cursor: pointer;\n  border-radius: 50%;\n  border: none;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n}\n\n/* 响应式调整 */\n@media (max-width: 450px) {\n  .music-player-container {\n    width: 90%;\n    padding: 20px;\n  }\n  \n  .vinyl-container {\n    width: 150px;\n    height: 150px;\n  }\n  \n  .control-buttons {\n    gap: 10px;\n  }\n  \n  .playlist-container {\n    width: 90%;\n  }\n}\n</style>","import script from \"./MusicPlayer.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./MusicPlayer.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./MusicPlayer.vue?vue&type=style&index=0&id=2ad88e36&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2ad88e36\"]])\n\nexport default __exports__","// 定义文章数据类型\nexport interface Article {\n  id: number;\n  title: string;\n  date: string;\n  content: string;\n  coverImg: string;\n}\n\n// 文章列表数据\nexport const getArticles = (): Article[] => {\n  return [\n    {\n      id: 1,\n      title: \"目前已公开的情报\",\n      date: \"2025-9-16 · 个人微简介\",\n      content: \"目前是大一在读生，喜欢游戏和动漫。\" +\n        \"\\n\\n性格较为内向，但和我混熟了会发现我是相当奔放不要脸的人哦\" +\n        \"\\n\\n做这个网站是自己学了一些前端，并加上ai的辅佐（虽然大部分是ai大人的功劳）建立的\" +\n        \"\\n\\n未来我更牛逼了会让它变得更加漂亮的！\",\n      coverImg: require('../assets/images/希露菲.jpg')\n    },\n    {\n      id: 2,\n      title: \"在世上留下爪痕！\",\n      date: \"2025-9-16 · 目标与未来\",\n      content: \"我未来的目标在大学是升学，去到更好的地方深造自己\" +\n        \"\\n\\n未来希望在芯片和人工智能领域做出贡献，同时我还有的研究兴趣是脑科学，十分美妙哦\" +\n        \"\\n\\n对未来的态度是憧憬且带有希望的，希望能变得更强\",\n      coverImg: require('../assets/images/洛琪希.jpg')\n    },\n    {\n      id: 3,\n      title: \"和我玩喵\",\n      date: \"2025-9-16 · 联系与共斗\",\n      content: \"我steam大号的id是888410264\" +\n        \"\\n\\n希望找到共同爱好的人一起共斗哇，加我wx也可,简单说一些我喜欢的游戏：神之天平，赛博朋克2077\"+\n        \"各种各样的单机游戏，我将来也会试着玩网游或二游的。如果说一个最喜欢的类型，是MMO哒\",\n      coverImg: require('../assets/images/爱丽丝.jpg')\n    }\n  ];\n}\n\n// 根据ID获取文章详情\nexport const getArticleById = (id: number): Article | undefined => {\n  const articles = getArticles();\n  return articles.find(article => article.id === id);\n};","// 控制页面滚动\n\nexport const disablePageScroll = (): void => {\n  document.body.classList.add('modal-open');\n  document.body.style.overflow = 'hidden';\n};\n\nexport const enablePageScroll = (): void => {\n  document.body.classList.remove('modal-open');\n  document.body.style.overflow = '';\n};\n\n// 为元素添加渐入动画\nexport const addFadeInAnimation = (elements: HTMLElement[], delay = 100): void => {\n  elements.forEach((element, index) => {\n    setTimeout(() => {\n      element.classList.add('animate-in');\n    }, delay * index);\n  });\n};","import { defineComponent as _defineComponent } from 'vue'\nimport { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createStaticVNode as _createStaticVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"shiki-home\" }\nconst _hoisted_2 = { class: \"article-section\" }\nconst _hoisted_3 = { class: \"container\" }\nconst _hoisted_4 = { class: \"article-list\" }\nconst _hoisted_5 = { class: \"anime-section\" }\nconst _hoisted_6 = { class: \"container\" }\nconst _hoisted_7 = { class: \"data-section\" }\nconst _hoisted_8 = { class: \"container\" }\nconst _hoisted_9 = { class: \"music-section\" }\nconst _hoisted_10 = { class: \"container\" }\nconst _hoisted_11 = { class: \"music-player-wrapper\" }\n\nimport BannerSection from '../components/BannerSection.vue';\nimport ArticleCard from '../components/ArticleCard.vue';\nimport DetailModal from '../components/DetailModal.vue';\nimport BackToTop from '../components/BackToTop.vue';\nimport MusicPlayer from '../components/MusicPlayer.vue';\nimport AnimeRecommendation from '../components/AnimeRecommendation.vue';\nimport DataDisplay from '../components/DataDisplay.vue';\n\n// 导入外部资源\nimport { ref, onMounted } from 'vue';\nimport { Article, getArticles, getArticleById } from '../services/articleService';\nimport { disablePageScroll, enablePageScroll, addFadeInAnimation } from '../utils/scrollUtils';\n\n// 加载样式\nimport '../assets/styles/shikiHomeStyles.css';\n\n// 数据和状态\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'ShikiHome',\n  setup(__props) {\n\n// 导入组件\nconst articles = ref<Article[]>(getArticles());\nconst showDetail = ref(false);\nconst currentDetail = ref<Article | null>(null);\nconst isLoaded = ref(false);\n\n// 打开详情弹窗\nconst openDetail = (id: number) => {\n  const detail = getArticleById(id);\n  if (detail) {\n    currentDetail.value = detail;\n    showDetail.value = true;\n    disablePageScroll();\n  }\n};\n\n// 关闭详情弹窗\nconst closeDetail = () => {\n  showDetail.value = false;\n  enablePageScroll();\n};\n\n// 页面加载完成\nonMounted(() => {\n  // 模拟页面加载\n  setTimeout(() => {\n    isLoaded.value = true;\n    \n    // 添加卡片的渐入动画\n    const cards = Array.from(document.querySelectorAll('.article-card-item')) as HTMLElement[];\n    addFadeInAnimation(cards);\n    \n    // 延迟加载底部区域的图片，提升初始加载速度\n    setTimeout(() => {\n      const lazyImages = document.querySelectorAll('.lazy-load-image');\n      lazyImages.forEach(img => {\n        const dataSrc = (img as HTMLImageElement).getAttribute('data-src');\n        if (dataSrc) {\n          (img as HTMLImageElement).src = dataSrc;\n          // 图片加载完成后添加淡入效果\n          (img as HTMLImageElement).onload = function() {\n            (this as HTMLElement).style.opacity = '1';\n          };\n        }\n      });\n    }, 1500);\n  }, 800);\n});\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", {\n      class: _normalizeClass([\"page-loader\", { 'page-loaded': isLoaded.value }])\n    }, null, 2),\n    _createVNode(BannerSection),\n    _createElementVNode(\"section\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _cache[0] || (_cache[0] = _createElementVNode(\"h2\", {\n          class: \"section-title\",\n          \"data-aos\": \"fade-up\"\n        }, \"简单介绍自己\", -1)),\n        _createElementVNode(\"div\", _hoisted_4, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(articles.value, (article, index) => {\n            return (_openBlock(), _createBlock(ArticleCard, {\n              key: article.id,\n              article: article,\n              \"data-index\": index,\n              onClick: ($event: any) => (openDetail(article.id)),\n              class: \"article-card-item\"\n            }, null, 8, [\"article\", \"data-index\", \"onClick\"]))\n          }), 128))\n        ])\n      ])\n    ]),\n    _createVNode(DetailModal, {\n      show: showDetail.value,\n      detail: currentDetail.value,\n      onClose: closeDetail\n    }, null, 8, [\"show\", \"detail\"]),\n    _createVNode(BackToTop),\n    _createElementVNode(\"section\", _hoisted_5, [\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createVNode(AnimeRecommendation)\n      ])\n    ]),\n    _createElementVNode(\"section\", _hoisted_7, [\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createVNode(DataDisplay)\n      ])\n    ]),\n    _createElementVNode(\"section\", _hoisted_9, [\n      _createElementVNode(\"div\", _hoisted_10, [\n        _cache[1] || (_cache[1] = _createElementVNode(\"h2\", {\n          class: \"section-title\",\n          \"data-aos\": \"fade-up\"\n        }, \"🎵 不听milet的人生是相对失败的\", -1)),\n        _createElementVNode(\"div\", _hoisted_11, [\n          _createVNode(MusicPlayer)\n        ])\n      ])\n    ]),\n    _cache[2] || (_cache[2] = _createStaticVNode(\"<footer class=\\\"footer-section\\\"><div class=\\\"container\\\"><div class=\\\"footer-content\\\"><div class=\\\"haruhi-image\\\"><img src=\\\"\\\" data-src=\\\"../assets/images/凉宫春日.jpg\\\" alt=\\\"凉宫春日\\\" class=\\\"lazy-load-image\\\"></div><div class=\\\"haruhi-quote\\\"> 我对普通的人类没有兴趣，你们当中要是有外星人、未来人、异世界人以及超能力者的话，就尽管来找我吧！ </div><a href=\\\"https://github.com/shiki-desu\\\" target=\\\"_blank\\\" class=\\\"github-icon\\\"><img src=\\\"\\\" data-src=\\\"../assets/images/github.png\\\" alt=\\\"GitHub\\\" class=\\\"lazy-load-image\\\"></a></div></div></footer>\", 1))\n  ]))\n}\n}\n\n})","<template>\n  <div class=\"shiki-home\">\n    <!-- 顶部加载指示器 -->\n    <div \n      class=\"page-loader\"\n      :class=\"{ 'page-loaded': isLoaded }\"\n    ></div>\n    \n    <!-- 顶部Banner -->\n    <BannerSection />\n    \n    <!-- 文章列表区 -->\n    <section class=\"article-section\">\n      <div class=\"container\">\n        <h2 class=\"section-title\" data-aos=\"fade-up\">简单介绍自己</h2>\n        <div class=\"article-list\">\n          <ArticleCard \n            v-for=\"(article, index) in articles\" \n            :key=\"article.id\"\n            :article=\"article\"\n            :data-index=\"index\"\n            @click=\"openDetail(article.id)\"\n            class=\"article-card-item\"\n          />\n        </div>\n      </div>\n    </section>\n    \n    <!-- 文章详情弹窗 -->\n    <DetailModal \n      :show=\"showDetail\"\n      :detail=\"currentDetail\"\n      @close=\"closeDetail\"\n    />\n\n    <!-- 回到顶部按钮 -->\n    <BackToTop />\n    \n    <!-- 动画推荐区域 -->\n    <section class=\"anime-section\">\n      <div class=\"container\">\n        <AnimeRecommendation />\n      </div>\n    </section>\n\n    <!-- 数据展示区域 -->\n    <section class=\"data-section\">\n      <div class=\"container\">\n        <DataDisplay />\n      </div>\n    </section>\n\n    <!-- 音乐播放器区域 -->\n    <section class=\"music-section\">\n      <div class=\"container\">\n        <h2 class=\"section-title\" data-aos=\"fade-up\">🎵 不听milet的人生是相对失败的</h2>\n        <div class=\"music-player-wrapper\">\n          <MusicPlayer />\n        </div>\n      </div>\n    </section>\n\n    <!-- 底部区域 -->\n    <footer class=\"footer-section\">\n      <div class=\"container\">\n        <div class=\"footer-content\">\n          <div class=\"haruhi-image\">\n            <img \n              src=\"\" \n              data-src=\"../assets/images/凉宫春日.jpg\" \n              alt=\"凉宫春日\" \n              class=\"lazy-load-image\"\n            />\n          </div>\n          <div class=\"haruhi-quote\">\n            我对普通的人类没有兴趣，你们当中要是有外星人、未来人、异世界人以及超能力者的话，就尽管来找我吧！\n          </div>\n          <a href=\"https://github.com/shiki-desu\" target=\"_blank\" class=\"github-icon\">\n            <img \n              src=\"\" \n              data-src=\"../assets/images/github.png\" \n              alt=\"GitHub\" \n              class=\"lazy-load-image\"\n            />\n          </a>\n        </div>\n      </div>\n    </footer>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// 导入组件\nimport BannerSection from '../components/BannerSection.vue';\nimport ArticleCard from '../components/ArticleCard.vue';\nimport DetailModal from '../components/DetailModal.vue';\nimport BackToTop from '../components/BackToTop.vue';\nimport MusicPlayer from '../components/MusicPlayer.vue';\nimport AnimeRecommendation from '../components/AnimeRecommendation.vue';\nimport DataDisplay from '../components/DataDisplay.vue';\n\n// 导入外部资源\nimport { ref, onMounted } from 'vue';\nimport { Article, getArticles, getArticleById } from '../services/articleService';\nimport { disablePageScroll, enablePageScroll, addFadeInAnimation } from '../utils/scrollUtils';\n\n// 加载样式\nimport '../assets/styles/shikiHomeStyles.css';\n\n// 数据和状态\nconst articles = ref<Article[]>(getArticles());\nconst showDetail = ref(false);\nconst currentDetail = ref<Article | null>(null);\nconst isLoaded = ref(false);\n\n// 打开详情弹窗\nconst openDetail = (id: number) => {\n  const detail = getArticleById(id);\n  if (detail) {\n    currentDetail.value = detail;\n    showDetail.value = true;\n    disablePageScroll();\n  }\n};\n\n// 关闭详情弹窗\nconst closeDetail = () => {\n  showDetail.value = false;\n  enablePageScroll();\n};\n\n// 页面加载完成\nonMounted(() => {\n  // 模拟页面加载\n  setTimeout(() => {\n    isLoaded.value = true;\n    \n    // 添加卡片的渐入动画\n    const cards = Array.from(document.querySelectorAll('.article-card-item')) as HTMLElement[];\n    addFadeInAnimation(cards);\n    \n    // 延迟加载底部区域的图片，提升初始加载速度\n    setTimeout(() => {\n      const lazyImages = document.querySelectorAll('.lazy-load-image');\n      lazyImages.forEach(img => {\n        const dataSrc = (img as HTMLImageElement).getAttribute('data-src');\n        if (dataSrc) {\n          (img as HTMLImageElement).src = dataSrc;\n          // 图片加载完成后添加淡入效果\n          (img as HTMLImageElement).onload = function() {\n            (this as HTMLElement).style.opacity = '1';\n          };\n        }\n      });\n    }, 1500);\n  }, 800);\n});\n</script>","<template>\n  <div class=\"shiki-home\">\n    <!-- 顶部加载指示器 -->\n    <div \n      class=\"page-loader\"\n      :class=\"{ 'page-loaded': isLoaded }\"\n    ></div>\n    \n    <!-- 顶部Banner -->\n    <BannerSection />\n    \n    <!-- 文章列表区 -->\n    <section class=\"article-section\">\n      <div class=\"container\">\n        <h2 class=\"section-title\" data-aos=\"fade-up\">简单介绍自己</h2>\n        <div class=\"article-list\">\n          <ArticleCard \n            v-for=\"(article, index) in articles\" \n            :key=\"article.id\"\n            :article=\"article\"\n            :data-index=\"index\"\n            @click=\"openDetail(article.id)\"\n            class=\"article-card-item\"\n          />\n        </div>\n      </div>\n    </section>\n    \n    <!-- 文章详情弹窗 -->\n    <DetailModal \n      :show=\"showDetail\"\n      :detail=\"currentDetail\"\n      @close=\"closeDetail\"\n    />\n\n    <!-- 回到顶部按钮 -->\n    <BackToTop />\n    \n    <!-- 动画推荐区域 -->\n    <section class=\"anime-section\">\n      <div class=\"container\">\n        <AnimeRecommendation />\n      </div>\n    </section>\n\n    <!-- 数据展示区域 -->\n    <section class=\"data-section\">\n      <div class=\"container\">\n        <DataDisplay />\n      </div>\n    </section>\n\n    <!-- 音乐播放器区域 -->\n    <section class=\"music-section\">\n      <div class=\"container\">\n        <h2 class=\"section-title\" data-aos=\"fade-up\">🎵 不听milet的人生是相对失败的</h2>\n        <div class=\"music-player-wrapper\">\n          <MusicPlayer />\n        </div>\n      </div>\n    </section>\n\n    <!-- 底部区域 -->\n    <footer class=\"footer-section\">\n      <div class=\"container\">\n        <div class=\"footer-content\">\n          <div class=\"haruhi-image\">\n            <img \n              src=\"\" \n              data-src=\"../assets/images/凉宫春日.jpg\" \n              alt=\"凉宫春日\" \n              class=\"lazy-load-image\"\n            />\n          </div>\n          <div class=\"haruhi-quote\">\n            我对普通的人类没有兴趣，你们当中要是有外星人、未来人、异世界人以及超能力者的话，就尽管来找我吧！\n          </div>\n          <a href=\"https://github.com/shiki-desu\" target=\"_blank\" class=\"github-icon\">\n            <img \n              src=\"\" \n              data-src=\"../assets/images/github.png\" \n              alt=\"GitHub\" \n              class=\"lazy-load-image\"\n            />\n          </a>\n        </div>\n      </div>\n    </footer>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// 导入组件\nimport BannerSection from '../components/BannerSection.vue';\nimport ArticleCard from '../components/ArticleCard.vue';\nimport DetailModal from '../components/DetailModal.vue';\nimport BackToTop from '../components/BackToTop.vue';\nimport MusicPlayer from '../components/MusicPlayer.vue';\nimport AnimeRecommendation from '../components/AnimeRecommendation.vue';\nimport DataDisplay from '../components/DataDisplay.vue';\n\n// 导入外部资源\nimport { ref, onMounted } from 'vue';\nimport { Article, getArticles, getArticleById } from '../services/articleService';\nimport { disablePageScroll, enablePageScroll, addFadeInAnimation } from '../utils/scrollUtils';\n\n// 加载样式\nimport '../assets/styles/shikiHomeStyles.css';\n\n// 数据和状态\nconst articles = ref<Article[]>(getArticles());\nconst showDetail = ref(false);\nconst currentDetail = ref<Article | null>(null);\nconst isLoaded = ref(false);\n\n// 打开详情弹窗\nconst openDetail = (id: number) => {\n  const detail = getArticleById(id);\n  if (detail) {\n    currentDetail.value = detail;\n    showDetail.value = true;\n    disablePageScroll();\n  }\n};\n\n// 关闭详情弹窗\nconst closeDetail = () => {\n  showDetail.value = false;\n  enablePageScroll();\n};\n\n// 页面加载完成\nonMounted(() => {\n  // 模拟页面加载\n  setTimeout(() => {\n    isLoaded.value = true;\n    \n    // 添加卡片的渐入动画\n    const cards = Array.from(document.querySelectorAll('.article-card-item')) as HTMLElement[];\n    addFadeInAnimation(cards);\n    \n    // 延迟加载底部区域的图片，提升初始加载速度\n    setTimeout(() => {\n      const lazyImages = document.querySelectorAll('.lazy-load-image');\n      lazyImages.forEach(img => {\n        const dataSrc = (img as HTMLImageElement).getAttribute('data-src');\n        if (dataSrc) {\n          (img as HTMLImageElement).src = dataSrc;\n          // 图片加载完成后添加淡入效果\n          (img as HTMLImageElement).onload = function() {\n            (this as HTMLElement).style.opacity = '1';\n          };\n        }\n      });\n    }, 1500);\n  }, 800);\n});\n</script>","import script from \"./ShikiHome.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./ShikiHome.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 17928;\nmodule.exports = webpackEmptyContext;"],"names":["defineComponent","name","components","Modal","props","show","type","Boolean","default","detail","Object","emits","setup","contentParagraphs","computed","content","split","decorativeImages","require","getImageForParagraph","index","length","methods","closeModal","this","$emit","handleOpenChange","newValue","__exports__","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","key","_defineComponent","__name","__props","audio","Audio","playlist","ref","currentIndex","isPlaying","showPlaylist","showVolume","volume","isMuted","currentTime","duration","isDragging","currentSong","value","title","artist","src","floatingImages","reactive","id","style","randomizeImagePositions","shuffledImages","sort","Math","random","leftImages","slice","rightImages","forEach","img","left","right","topPosition","floor","top","animationDelay","zIndex","positionInterval","startPositionAnimation","clearInterval","window","setInterval","stopPositionAnimation","progressPercentage","formatTime","seconds","mins","secs","parseSongInfo","fileName","replace","includes","parts","loadMusicFiles","async","musicFiles","map","file","loadSong","song","load","error","console","togglePlay","pause","play","alert","playSong","wasPlaying","nextSong","nextIndex","prevSong","prevIndex","togglePlaylist","toggleVolume","updateVolume","startDragging","setProgress","percentage","newTime","handleMouseMove","e","progressBar","document","querySelector","rect","getBoundingClientRect","x","clientX","max","min","width","handleMouseUp","setupAudioEvents","ontimeupdate","onended","onloadedmetadata","onMounted","addEventListener","setTimeout","onUnmounted","removeEventListener","_ctx","_cache","_openBlock","_createElementBlock","_Fragment","_renderList","_normalizeStyle","_createElementVNode","alt","_imports_0","_toDisplayString","onMousedown","onClick","onDblclick","_withModifiers","_normalizeClass","$event","_createCommentVNode","_withDirectives","step","onInput","_vModelText","getArticles","date","coverImg","getArticleById","articles","find","article","disablePageScroll","body","classList","add","overflow","enablePageScroll","remove","addFadeInAnimation","elements","delay","element","showDetail","currentDetail","isLoaded","openDetail","closeDetail","cards","Array","from","querySelectorAll","lazyImages","dataSrc","getAttribute","onload","opacity","_createVNode","BannerSection","_createBlock","ArticleCard","DetailModal","onClose","BackToTop","AnimeRecommendation","DataDisplay","MusicPlayer","_createStaticVNode","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"sourceRoot":""}