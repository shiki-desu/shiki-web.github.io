{"version":3,"file":"js/vendors-bc4c4ab1.3eacc6e8.js","mappings":"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","sources":["webpack://shiki-web/./node_modules/ant-design-vue/es/qrcode/qrcodegen.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n'use strict';\n\nvar qrcodegen;\n(function (qrcodegen) {\n  /*---- QR Code symbol class ----*/\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  class QrCode {\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen.QrSegment.makeSegments(text);\n      return QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen.QrSegment.makeBytes(data);\n      return QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl) {\n      let minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n      let boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n      // Find the minimal version number to use\n      let version;\n      let dataUsedBits;\n      for (version = minVersion;; version++) {\n        const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits) {\n          dataUsedBits = usedBits;\n          break; // This version number is found to be suitable\n        }\n        if (version >= maxVersion)\n          // All versions in the range could not fit the given data\n          throw new RangeError('Data too long');\n      }\n      // Increase the error correction level while the data still fits in the current version number\n      for (const newEcl of [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]) {\n        // From low to high\n        if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n      }\n      // Concatenate all segments to create the data bit string\n      const bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData()) bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      // Add terminator and pad up to a byte if applicable\n      const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      // Pad with alternating bytes until data capacity is reached\n      for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n      // Pack bits into bytes in big endian\n      const dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      // Create the QR Code object\n      return new QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n      if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      const row = [];\n      for (let i = 0; i < this.size; i++) row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk == -1) {\n        // Automatically choose best mask\n        let minPenalty = 1000000000;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i); // Undoes the mask due to XOR\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      // Draw horizontal and vertical timing patterns\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      // Draw numerous alignment patterns\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          // Don't draw on the three finder corners\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      // Draw configuration data\n      this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      // Calculate error correction code and pack bits\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n      let rem = data;\n      for (let i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n      const bits = (data << 10 | rem) ^ 0x5412; // uint15\n      assert(bits >>> 15 == 0);\n      // Draw first copy\n      for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      // Draw second copy\n      for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true); // Always dark\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7) return;\n      // Calculate error correction code and pack bits\n      let rem = this.version; // version is uint6, in the range [7, 40]\n      for (let i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n      const bits = this.version << 12 | rem; // uint18\n      assert(bits >>> 18 == 0);\n      // Draw two copies\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n      // Calculate parameter numbers\n      const numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      // Split data into blocks and append ECC to each block\n      const blocks = [];\n      const rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      // Interleave (not concatenate) the bytes from every block into a single sequence\n      const result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          // Skip the padding byte in short blocks\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n      let i = 0; // Bit index into the data\n      // Do the funny zigzag scan\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        // Index of right column in each column pair\n        if (right == 6) right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          // Vertical counter\n          for (let j = 0; j < 2; j++) {\n            const x = right - j; // Actual x coordinate\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n            // If this QR Code has any remainder bits (0 to 7), they were assigned as\n            // 0/false/light by the constructor and are left unchanged by this method\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error('Unreachable');\n          }\n          if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      // Adjacent modules in row having same color, and finder-like patterns\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n      }\n      // Adjacent modules in column having same color, and finder-like patterns\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\n      }\n      // 2*2 blocks of modules having same color\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1]) result += QrCode.PENALTY_N2;\n        }\n      }\n      // Balance of dark and light modules\n      let dark = 0;\n      for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n      // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1) return [];else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        const result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n      // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n      // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n      const result = [];\n      for (let i = 0; i < degree - 1; i++) result.push(0);\n      result.push(1); // Start off with the monomial x^0\n      // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n      // and drop the highest monomial term which is always 1x^degree.\n      // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        // Multiply the current product by (x - r^i)\n        for (let j = 0; j < result.length; j++) {\n          result[j] = QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n        root = QrCode.reedSolomonMultiply(root, 0x02);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      const result = divisor.map(_ => 0);\n      for (const b of data) {\n        // Polynomial division\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n      // Russian peasant multiplication\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 0x11d;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        // Terminate dark run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size; // Add light border to final run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  }\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n    for (let i = len - 1; i >= 0; i-- // Append bit by bit\n    ) bb.push(val >>> i & 1);\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  // Throws an exception if the given condition is false.\n  function assert(cond) {\n    if (!cond) throw new Error('Assertion error');\n  }\n  /*---- Data segment class ----*/\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  class QrSegment {\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      const bb = [];\n      for (const b of data) appendBits(b, 8, bb);\n      return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n      const bb = [];\n      for (let i = 0; i < digits.length;) {\n        // Consume up to 3 digits per iteration\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n      const bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        // Process groups of 2\n        let temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        // 1 character remaining\n        appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      // Select the most efficient segment encoding automatically\n      if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      const bb = [];\n      if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n        appendBits(0b10, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1000000) {\n        appendBits(0b110, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else throw new RangeError('ECI assignment value out of range');\n      return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError('Invalid argument');\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice(); // Make defensive copy\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      const result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  }\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    class Ecc {\n      /*-- Constructor and fields --*/\n      constructor(\n      // In the range 0 to 3 (unsigned 2-bit integer).\n      ordinal,\n      // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n      formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    }\n    /*-- Constants --*/\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    class Mode {\n      /*-- Constructor and fields --*/\n      constructor(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    }\n    /*-- Constants --*/\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n// Modification to export for actual use\nexport default qrcodegen;"],"names":["qrcodegen","QrCode","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","version","dataUsedBits","minVersion","arguments","length","undefined","maxVersion","mask","boostEcl","MIN_VERSION","MAX_VERSION","RangeError","dataCapacityBits","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","b","getData","push","assert","Math","min","padByte","dataCodewords","forEach","i","constructor","errorCorrectionLevel","msk","this","modules","isFunction","size","row","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","a","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","bitData","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","numBitsCharCount","KANJI"],"sourceRoot":""}